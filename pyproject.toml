[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "synth-agent"
version = "0.1.0"
description = "AI-Powered CLI Agent for Synthetic Data Generation"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
keywords = ["synthetic-data", "ai", "cli", "data-generation", "llm"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # CLI & UI
    "typer>=0.12.0",
    "rich>=13.7.0",
    "prompt-toolkit>=3.0.43",

    # LLM Integration
    "openai>=1.12.0",
    "anthropic>=0.18.0",
    "langchain>=0.1.0",
    "langchain-openai>=0.0.5",
    "langchain-anthropic>=0.1.0",

    # Data Processing
    "pandas>=2.2.0",
    "numpy>=1.26.0",
    "faker>=24.0.0",
    "mimesis>=12.0.0",

    # Format Handlers
    "pyarrow>=15.0.0",
    "openpyxl>=3.1.2",
    "lxml>=5.1.0",
    "reportlab>=4.0.0",
    "python-docx>=1.1.0",

    # Cloud Storage
    "boto3>=1.34.0",
    "google-cloud-storage>=2.14.0",
    "azure-storage-blob>=12.19.0",

    # Analysis
    "scikit-learn>=1.4.0",
    "scipy>=1.12.0",

    # Configuration & Validation
    "pydantic>=2.6.0",
    "pydantic-settings>=2.1.0",
    "pyyaml>=6.0.1",
    "python-dotenv>=1.0.0",

    # Logging
    "structlog>=24.1.0",

    # HTTP & Async
    "httpx>=0.26.0",
    "aiofiles>=23.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.23.0",
    "black>=24.0.0",
    "ruff>=0.2.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]

[project.scripts]
synth-agent = "synth_agent.__main__:main"

[project.urls]
Homepage = "https://github.com/yourusername/synthetic-data-generator"
Documentation = "https://github.com/yourusername/synthetic-data-generator/docs"
Repository = "https://github.com/yourusername/synthetic-data-generator"
Issues = "https://github.com/yourusername/synthetic-data-generator/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 100
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.isort]
known-first-party = ["synth_agent"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true

[[tool.mypy.overrides]]
module = [
    "faker.*",
    "mimesis.*",
    "reportlab.*",
    "docx.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=synth_agent",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "-v"
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/__main__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
