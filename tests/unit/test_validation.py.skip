"""Unit tests for validation modules."""

import pytest
import pandas as pd
from unittest.mock import Mock, patch

from synth_agent.validation.quality_validator import QualityValidator
from synth_agent.core.config import Config


class TestQualityValidator:
    """Tests for quality validator."""

    def test_quality_validator_initialization(self):
        """Test quality validator initialization."""
        config = Config()
        validator = QualityValidator(config)

        assert validator.config == config
        assert hasattr(validator, 'validate_data')

    def test_validate_data_with_valid_dataframe(self):
        """Test validating a valid DataFrame."""
        config = Config()
        validator = QualityValidator(config)

        df = pd.DataFrame({
            'id': [1, 2, 3, 4, 5],
            'name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],
            'age': [25, 30, 35, 40, 45]
        })

        result = validator.validate_data(df)

        assert isinstance(result, dict)
        assert 'valid' in result or 'is_valid' in result or 'quality_score' in result

    def test_validate_data_with_nulls(self):
        """Test validating DataFrame with null values."""
        config = Config()
        validator = QualityValidator(config)

        df = pd.DataFrame({
            'id': [1, 2, None, 4, 5],
            'name': ['Alice', 'Bob', None, 'David', 'Eve'],
            'age': [25, None, 35, 40, 45]
        })

        result = validator.validate_data(df)

        assert isinstance(result, dict)

    def test_validate_data_with_duplicates(self):
        """Test validating DataFrame with duplicates."""
        config = Config()
        validator = QualityValidator(config)

        df = pd.DataFrame({
            'id': [1, 2, 2, 3, 3],
            'name': ['Alice', 'Bob', 'Bob', 'Charlie', 'Charlie']
        })

        result = validator.validate_data(df)

        assert isinstance(result, dict)

    def test_validate_empty_dataframe(self):
        """Test validating empty DataFrame."""
        config = Config()
        validator = QualityValidator(config)

        df = pd.DataFrame()

        result = validator.validate_data(df)

        assert isinstance(result, dict)

    def test_check_completeness(self):
        """Test completeness checking."""
        config = Config()
        validator = QualityValidator(config)

        df = pd.DataFrame({
            'col1': [1, 2, None, 4],
            'col2': ['a', 'b', 'c', 'd']
        })

        # Method might be named differently
        if hasattr(validator, 'check_completeness'):
            result = validator.check_completeness(df)
            assert isinstance(result, (dict, float, bool))

    def test_check_uniqueness(self):
        """Test uniqueness checking."""
        config = Config()
        validator = QualityValidator(config)

        df = pd.DataFrame({
            'id': [1, 2, 2, 3],
            'value': [10, 20, 30, 40]
        })

        if hasattr(validator, 'check_uniqueness'):
            result = validator.check_uniqueness(df)
            assert isinstance(result, (dict, bool))

    def test_check_consistency(self):
        """Test consistency checking."""
        config = Config()
        validator = QualityValidator(config)

        df = pd.DataFrame({
            'age': [25, 30, -5, 150],  # Outliers
            'name': ['Alice', 'Bob', 'Charlie', 'David']
        })

        if hasattr(validator, 'check_consistency'):
            result = validator.check_consistency(df)
            assert isinstance(result, (dict, bool))

    def test_calculate_quality_score(self):
        """Test quality score calculation."""
        config = Config()
        validator = QualityValidator(config)

        df = pd.DataFrame({
            'id': [1, 2, 3, 4, 5],
            'name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],
            'age': [25, 30, 35, 40, 45]
        })

        if hasattr(validator, 'calculate_quality_score'):
            score = validator.calculate_quality_score(df)
            assert isinstance(score, (int, float))
            assert 0 <= score <= 100 or 0 <= score <= 1

    def test_get_validation_report(self):
        """Test getting validation report."""
        config = Config()
        validator = QualityValidator(config)

        df = pd.DataFrame({
            'id': [1, 2, 3],
            'value': [10, 20, 30]
        })

        if hasattr(validator, 'get_report'):
            report = validator.get_report(df)
            assert isinstance(report, dict)
        elif hasattr(validator, 'get_validation_report'):
            report = validator.get_validation_report(df)
            assert isinstance(report, dict)
